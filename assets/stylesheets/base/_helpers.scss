// -----------------------------------------------------------------------------
// This file contains CSS helper classes.
// -----------------------------------------------------------------------------

$duration: 0.5s;

/* CLASSES
============================================================================ */
%loading-bg {
	background-image: image('loading.svg');
	background-position: 50% 50%;
	background-repeat: no-repeat;
	background-color: palette('loading', 'background');
}

%loading-el {
	position: relative;

	overflow: hidden;

	cursor: wait;

	&::after {
		@extend %loading-bg;

		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;

		z-index: layer('modal');

		content: '';

		opacity: 0.75;
	}
}


/// Content which loads **after** the page does, should be informed to user.
///
/// `[aria-busy='true']` adds a loading background to any loading element
/// which can't be a parent and a pseudo element over any element other than
/// `html`.
///
/// Don't forget to customize it to your needs. Speacially the background
/// color.
///
/// Already applied to `embed` and `img`, which can cause issues with
/// transparent images.
///
/// @author Sobral
/// @group helpers
///
/// @example markup
///
/// <dialog open aria-busy="true">
/// 	<form method="dialog">
/// 		[...]
/// 	</form>
/// </dialog>
///
[aria-busy='true'] {
	> body,
	&:not(html) {
		@extend %loading-el;
	}
}

img,
embed {
	position: relative;

	background-size: auto;

	::before {
		@extend %loading-bg;

		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;

		z-index: layer('modal');

		cursor: wait;

		content: '';

		opacity: 0.75;
	}

	&::after {
		/*
		 *	Future proof reset
		 */
		content: none;
	}
}

input,
output,
keygen,
textarea {
	&[aria-busy='true'] {
		@extend %loading-bg;

		background-size: auto;
	}
}

/// Load the Susy grid under the class `grid`
///
/// @author Sobral
/// @group helpers
///
/// @example markup
///
/// <html class="grid">
/// 	<body>
/// 		[...]
/// 	</body>
/// </html>
///
.grid {
	&::before,
	&::after {
		position: fixed;
		top: 0;
		left: 0;

		z-index: layer('modal');

		font-size: 1rem;

		pointer-events: none;
	}

	&::before {
		padding: 0.5em;

		font-weight: bold;

		border-width: 0 1px 1px 0;
		border-style: solid;
		border-color: palette('debug');

		content: 'mobile';

		@media screen and(min-width: breakpoint('phablet')) {
			content: 'phablet';
		}

		@media screen and(min-width: breakpoint('tablet')) {
			content: 'tablet';
		}

		@media screen and(min-width: breakpoint('desktop')) {
			content: 'desktop';
		}

		@media screen and(min-width: breakpoint('wide')) {
			content: 'wide';
		}
	}

	&::after {
		bottom: 0;
		left: 50%;

		width: 100%;
		max-width: $max-width;

		background-image: grid-image(2);
		background-position: center top;
		background-size: 100%;
		background-repeat: repeat-y;

		content: '';

		transform: translateX(-50%);

		@media screen and(min-width: breakpoint('phablet')) {
			background-image: grid-image(3);
		}

		@media screen and(min-width: breakpoint('tablet')) {
			background-image: grid-image(4);
		}

		@media screen and(min-width: breakpoint('desktop')) {
			background-image: grid-image(5);
		}

		@media screen and(min-width: breakpoint('wide')) {
			background-image: grid-image(6);
		}
	}
}

.delayed-entrance {
	opacity: 1;

	transition-duration: 0.5s;
	transition-property: opacity, transform;
	transition-timing-function: cubic-bezier(0.39, 0.58, 0.57, 1);

	// & + & {
	// 	transition-delay: 0.3s;
	// }

	&:nth-child(2):nth-last-child(2) {
		transition-delay: 0.6s;
	}

	.delayed-entrance {
		transition-delay: 0.5s;

		& + & {
			transition-delay: 0.8s;
		}

		&:nth-child(2):nth-last-child(2) {
			transition-delay: 0.11s;
		}
	}
}

.delayed-entrance__bottom {
	opacity: 0;
	transform: translateY(5%);
}

.container {
	@include clearfix;

	max-width: $max-width;

	padding-top: $line-height * 2em;
	padding-right: $gutter;
	padding-bottom: $line-height * 2em;
	padding-left: $gutter;
	margin-right: auto;
	margin-left: auto;

	& + & {
		margin-bottom: 0;
	}
}

article .container {
	padding: 0;
}

.alternate-paragraphs .article__content {
	max-width: none;

	margin-right: 0;
	margin-left: 0;
}

.alternate-paragraphs p:nth-of-type(2n) {
	margin-right: auto;
	margin-left: 0;

	text-align: left;
}

.alternate-paragraphs h2,
.alternate-paragraphs p {
	max-width: 600px;

	margin-right: 0;
	margin-left: auto;

	text-align: right;
}

body {
	scroll-snap-type: y mandatory;
}

.snapping-section {
	scroll-snap-align: start;
}

.container > figure {
	@media screen and (min-width: breakpoint('tablet')) {
		float: right;

		margin-left: $gutter;
	}
}

.wave-ornament.wave-ornament.wave-ornament {
	position: relative;
	right: -50vw;
	left: -50vw;

	width: 100vw;

	padding-right: $gutter;
	padding-left: $gutter;
	margin-right: 50%;
	margin-left: 50%;

	background-image: image('bg-wave--3.png'), image('bg-wave--2.png'), image('bg-wave--1.png');
	background-position: left 0 bottom 1px, left 0 bottom, left 0 bottom 2px;
	background-size: 1050px auto;
	background-repeat: repeat-x;

	transition-delay: 0;
	transition-property: background-position;

	&::after {
		clear: both;

		display: block;

		width: 100%;
		min-height: 232px;

		content: '';
	}
}

.results-loading {
	min-height: 0;

	transition-duration: $duration;
	transition-property: min-height;

	&[aria-busy='true'] {
		display: flex;

		flex-direction: column;
		flex-grow: 1;

		color: palette('purple');

		&::before,
		&::after {
			position: static;

			flex-basis: 0;
			flex-grow: 1;

			width: 100%;
			max-width: 24em;

			padding: $line-height * 1rem;
			margin-right: auto;
			margin-left: auto;

			background-color: transparent;
		}

		&::before {
			min-height: 96px;

			background-image: image('spinner.svg');
			background-position: 50% 75%;
			background-repeat: no-repeat;

			content: '';
		}

		&::after {
			text-align: center;

			background-image: none;

			content: attr(data-loading-1);

			opacity: 0;

			animation-name: loading;
			animation-duration: $duration * 48;
			animation-iteration-count: infinite;
		}
	}

	@at-root {
		@keyframes loading {
			0% {
				content: attr(data-loading-1);

				opacity: 0;
			}

			10% {
				opacity: 1;
			}

			20% {
				content: attr(data-loading-1);

				opacity: 0;
			}

			21% {
				content: attr(data-loading-2);

				opacity: 0;
			}

			30% {
				opacity: 1;
			}

			40% {
				content: attr(data-loading-2);

				opacity: 0;
			}

			41% {
				content: attr(data-loading-3);

				opacity: 0;
			}

			50% {
				opacity: 1;
			}

			60% {
				content: attr(data-loading-3);

				opacity: 0;
			}

			61% {
				content: attr(data-loading-4);

				opacity: 0;
			}

			70% {
				opacity: 1;
			}

			80% {
				content: attr(data-loading-4);

				opacity: 0;
			}

			81% {
				content: attr(data-loading-5);

				opacity: 0;
			}

			90% {
				opacity: 1;
			}

			100% {
				content: attr(data-loading-5);

				opacity: 0;
			}
		}
	}
}
